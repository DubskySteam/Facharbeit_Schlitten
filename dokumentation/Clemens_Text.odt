Gliederung
Inhaltsverzeichnis	2
Einleitung	3
Ziel der Facharbeit	3
Verwendete Bricks	3
Verwendete Bricklets	3
Sensoren | Aktoren	4
Distance IR	4
Potentiometer	5
Master Brick	6
Stepper Brick	6
Der Code	7
Auswahl der Programmiersprache	7
Verwendete APIs	8
Funktionsweise	9
Analyse der Gruppenarbeit	11

Einleitung
Ziel der Facharbeit
Das Ziel der Facharbeit ist es, den vorhandenen Schlitten mit Sensoren so um zu funktionieren, dass er mit einem Abstandssensor ein Objekt vor sich wahrnehmen kann und zu diesem Objekt einen Abstand hält.
Verwendete Bricks
• Master Brick
• Stepper Brick
• DC Brick
Verwendete Bricklets
• Distance IR
• Linear Poti
• Rotary Poti
• OLED 128x64
Sensoren | Aktoren
Distance IR

Der Distance IR Sensor ist ein Tinkerforge Bricklet, welches wie der Name bereits sagt, eine Distanz mit Infrarot Licht misst.
Der IR Sensor oder auch Infrarot Entfernungsmesser genannt, macht sich zur Distanzberechnung ein Verfahren zu eigen wie es viele andere Entfernungsmesser auch machen, die Triangulation.
Der IR Sensor hat einen analogen Stromanschluss, welcher ihn mit Strom versorgt und auch eine Infrarot-LED speist. Diese LED sitzt hinter einer Linse die als Fokusglas dient oder einfach gesehen als Polarisator. Durch die Linse strahlt der Sensor nun einen gezielten Infrarot Strahl aus. Trifft dieser Strahl auf ein Objekt, wird er reflektiert.
Der reflektierte Strahl wird von der zweiten Linse des Sensors aufgenommen und dann zu einem optischen Positionssensor weitergeleitet. Je nach Stelle an der der Infrarotstrahl eintrifft wird auch die Leitfähigkeit beeinflußt.
Ein Analog-Digital Konverter wandelt es dann zu einer Spannung um, aus der letztendlich die Berechnung der Entfernung stattfindet.
In dem unten angefügten Bild wird einem dieses Verfahren noch einmal veranschaulicht.

Anmerkung:
IR Sensoren dieser Art haben aufgrund ihrer Technik verschiedene Messbereiche.
Wir haben einen Sensor benutzt der Entfernungen von 5cm bis zu 50cm gut wahrnehmen kann.
Potentiometer

Ein Potentiometer, oder folglich auch oft einfach nur „Poti“ genannt, ist ein elektronisches Bauteil was schwer auf Widerstände baut, und nur durch sie ihren Nutzen erlangen.
Sie werden auch oft als Spannungsteiler betitelt.
Der Potentiometer besteht im Normalfall aus zwei wichtigen „Bauteilen“, einem Draht der Widerstand leistet (Widerstandsdraht) und einem Gleitkontakt.
Dieser Gleitkontakt teilt die gesamte Spannung so gesehen in 2 Teilwiderstände auf, dies erkennt man am besten beim Linearen Poti (Schaubild 3).
Wenn man nun den Gleitkontakt, welcher meistens auch der Slider ist, bewegt verändern sich auch die Teilwiderstände.
Diese Teilspannung werden gemessen und als digitales Signal vom Poti übertragen werden.
Diese simple aber effektive Funktionsweise eignet den Potentiometer im allgemeinen für die elektrische Steuerung von vielen Geräten und Bauteilen.

Wir haben für unser Projekt 2 Potis benutzt um andere Bricklets zu steuern, einmal einen Drehpoti und einen Linear Poti.
Master Brick

Der Master Brick ist ein Tinkerforge exklusives Hardwarebauteil, welches lediglich 2 Funktionen erfüllt.
Zum einen ist er in der Lage mehrere Bricklets, wie es bei uns der Fall ist, die aufeinander gestapelt sind miteinander zu verbinden.
Auf diesem Weg fällt es leicht einen klaren und organisierten Aufbau der Bricklets zu gestalten.
Auch kommt er durch seine 4 Anschlüsse gut gelegen für Projekte bei denen viele verschiedene Module benötigt werden. Leider sind bei unserem Master Brick 2 der 4 Ports kaputt und somit nicht benutzbar gewesen.
Stepper Brick

Der Stepper Brick an sich hat nur ein Aufgabe. An ihm wird der Stepper Motor so wie auch ein externes Netzteil angeschlossen.
Da über die USB Verbindung nicht genügend Strom geliefert werden kann, muss ein bestimmtes Netzteil mit angeschlossen werden.
Ebenfalls besitzt auch der Stepper Brick 2 weitere Anschlüsse für weitere Bricklets, auf die wir im weiteren Verfahren angewiesen waren.
Über den Stepper Brick kann nun die Geschwindigkeit, Beschleunigung so wie auch Bremsleistung und verschiedene Step Modi eingestellt werden.

Der Code
Auswahl der Programmiersprache

Im Verlauf der Facharbeit mussten wir uns eine geeignete Programmiersprache aussuchen, mit der wir unser Projekt fertig stellen können.
Aufgrund von Vorwissen auf dem Bereich, haben wir uns dazu entschieden 2 separate Programme anzufertigen. Ein Programm soll die gesamte technische Steuerung übernehmen, und ist so gesehen das Gehirn des Software Anteils.
Das andere Programm ist lediglich für eine übersichtliche grafische Darstellung zuständig.
Für die Steuerung nutzen wir Python, da Python einen übersichtlichen und schnellen Syntax besitzt. Auch wenn es einen Interpreter benötigt, ist Python für diese Art von Software bestens geeignet.
Für den grafischen Teil nutzen wir VB im Microsofts .Net Framework. VB bietet sich an, da es viele gute Aspekte von C++ wie auch C# etc. übernommen hat und im Vergleich zu C# einen einfacheren Syntax besitzt.
Da die Computer in der Schule keinen Python Interpreter installiert haben und auch keine geeignete IDE für Python/VB haben, haben wir als Übergang für die Schulrechner Processing genutzt, welches auf Java basiert und mit einigen Abstrichen doch recht gut den grafischen mit Steuerung unter einem Hut vereinen kann.
Wichtig war natürlich auch, dass Tinkerforge jeweils eine API für die jeweiligen Sprachen zur Verfügung gestellt haben.

Zur Organisation des Codes haben wir GitHub genutzt.
Link zum Repo: https://github.com/DubskySteam/Facharbeit_Schlitten 

Verwendete APIs

Eine API ist eine Programmierschnittstelle die Unternehmen für ihre Software & Hardware veröffentlichen um Nutzern eine Möglichkeit zu bieten ihre Software auf Sourcecode Ebene mit dem Produkt zu verbinden.
Tinkerforge bietet für die gängigsten Programmiersprachen jeweils eine API auf der eigenen Website an.
Da wir 3 verschiedene einzelne Programme im Verlauf der Facharbeit geschrieben haben, jeweils in verschiedenen Programmiersprachen, brauchten wir also auch 3 verschiedene APIs.
Python: https://www.tinkerforge.com/de/doc/Software/API_Bindings_Python.html#api-referenz-und-beispiele 
VB.Net: https://www.tinkerforge.com/de/doc/Software/API_Bindings_VBNET.html#api-bindings-vbnet 
Processing: https://www.tinkerforge.com/de/doc/Software/API_Bindings_Java.html#api-bindings-java
Funktionsweise

Steuerung
Über unser Python Skript läuft die Steuerung der ganzen Apparatur ab.
Über die von Tinkerforge zur Verfügung gestellte API wird eine Verbindung auf lokaler Ebene hergestellt, die es uns ermöglicht die Bricklets anzusteuern.
Über den IR Entfernungsmesser wird im Millisekunden-Takt die Entfernung zu einem Objekt abgerufen. Ist diese Entfernung groß genug, wird der Stepper Brick angesteuert, welcher wiederum den Motor ansteuert der den Schlitten bewegt. Durch weitere konstante Messung der Distanz erkennt das Programm wann die Distanz gering genug ist um einen Stopp Befehl an den Stepper zu schicken. Sollte die Distanz allerdings zu gering sein, fährt der Stepper Brick den Schlitten in die entgegengesetzte Richtung, also weg vom Objekt.
Läuft dieser Vorgang korrekt ab, wird immer eine eingespeicherte Entfernung zum Objekt gehalten.
Alle Einstellungen bezüglich Geschwindigkeit, Spannung, Beschleunigung, Verlangsamung etc. werden im Vorfeld als Variablen gespeichert.
Beim Start, so wie auch bei Änderung, werden die gesetzten Einstellungen auf dem angebauten OLED Display angezeigt.
Um endlos lange IF-Schleifen wie auch CASE-Abfragen zu vermeiden, haben wir auf Callbacks gesetzt. Callbacks können zur Veranschaulichung als Events gesehen werden die am Anfang registriert werden können.
Wird ein registriertes Event, wie z.B die Veränderung in der Motorgeschwindigkeit, ausgelöst so folgt ein Code. In unserem Fall wird auf diese Art und Weise die Steuerung geregelt.
Auf diesem Weg muss nicht permanent eine Variable neu eingelesen werden, sondern eine Veränderung der Gegebenheiten aktiviert ihren eigenen Code selber. Dies ist auf Softwaretechnischer Seite deutlich effektiver und schneller im Ablauf.
Als gutes Beispiel dafür können die Potis genommen werden. Bei Veränderung des Linearen Potis wird die Position überprüft und entschieden ob der Stepper aus- oder angeschaltet wird. Der Drehpotentiometer dagegen hat 3 verschiedene Positionen eingespeichert, bei denen er jeweils den DC Brick mit einer anderen Geschwindigkeit zu drehen auffordert um den mit ihm verbundenen Lüfter zu steuern.
Darstellung
Da sich eine grafische Darstellung, wie wir es gerne hätten, über Python relativ schwer gestaltet und auf eine GUI Bibiliothek wie TKInter baut, haben wir hier auf VB.Net gesetzt.
Unter dem .Net Framework und Visual Studio ist eine visuelle Darstellung deutlich einfacher.
Dank der im Nu-Get Manager bereits vorhandenen API ist eine Verbindung sehr leicht gefallen.
Das Programm ruft jetzt permanent lediglich Positionen und andere Daten ab, speichert sie in lokale Variablen und aktualisiert Labels mit den gesammelten Daten.
Zur Übersicht gehört auch dazu, dass überprüft wird ob das Python Skript für die Steuerung gerade am laufen ist.
Dafür gibt es einen Listener der aktuelle Prozesse nach dem Skript durchsucht und überwacht. Im Programm selber wird auch dies grafisch dargestellt.
Analyse der Gruppenarbeit

Bei unserer Gruppenarbeit sind wir so vorgegangen, dass jeder seine Stärken ausspielen konnte. Da Clemens ein relativ gutes Händchen für Programmiersprachen hat und eine sehr hohe Kenntnis an Befehlen und Methoden besitzt hat er größtenteils den Part des Programmierens übernommen. Hierbei musste sehr hohe Konzentration an den Tag gelegt werden, da jeder noch so kleine Fehler in z.B. Rechtschreibung oder Zeichensetzung zu einem Error und somit zu einem nicht Funktionierendem Programmcode geführt hat. 
 Ich (Linus) konnte meine Stärke des technischen Verständnisses ausspielen indem ich mich auf den Zusammenbau des Projekts (Schlitten 3.0) konzentriert habe, hierbei war es wichtig zu überlegen welche Module für was am besten geeignet waren und wie diese am besten angeordnet und Positioniert wurden. Auch nicht unwichtig waren die Arten der Brick die wir verwendet haben und wie diese mit den Bricklets verbunden werden mussten. Des Weiteren musste auch genau Überlegt werden wie die Kabel am besten verlegt werden damit es zu keinen Behinderungen der Frei Gängigkeit des Schlittens sowie zu Kabelbrüchen kam.
Erkan war übers ganze Halbjahr eine sehr gute Mentale Unterstützung. Er konnte immer gute und Hilfreiche Ideen beitragen, wenn wir auf ein Problem gestoßen sind und hat geholfen diese zu lösen. Er hat sowohl beim Programmieren sowohl auch beim Zusammenbau des Schlittens geholfen. Man kann sagen er war der Mann für alles.
Wir haben versucht die Arbeitsaufteilung so gut wie möglich zu gestalten, dies ist uns soweit auch ganz gut gelungen. Der Clemens und Ich (Linus) haben etwas mehr Wissen und Erfahrung und Fleiß in dieses Projekt eingebracht, da wir solch eine Facharbeit bereits letztes Jahr erarbeiten musste hatten wir auch schon Erfahrung wie alles abläuft und am besten zu bearbeiten ist. So wie Clemens und Ich (Linus) die Dokumentation erarbeitet haben und leider auf die Hilfe von Erkan dank fehlender Fachkenntnisse verzichten mussten
